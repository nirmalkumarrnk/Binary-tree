#include<bits/stdc++.h>
using namespace std;

class Node  
{  
    public: 
    int data;  
    Node *left,*right;  
};  


Node* newNode(int data) 
{ 
    Node* newNode = new Node(); 
    newNode->data = data; 
    newNode->left = newNode->right = NULL; 
    return (newNode); 
} 


Node* createNode()
{
    int data;
    Node* newnode=new Node();
    cout<<"Enter data :\n";cin>>data;
    if(data==-1) return 0;
    newnode->data=data;
    cout<<"Enter left child of "<<data<<endl;
    newnode->left=createNode();
    cout<<"Enter right child of "<<data<<endl;
    newnode->right=createNode();
    return newnode;
}

void printTree(Node* root)
{
    cout<<root->data<<" ";
    cout<<root->left->data<<" ";
    cout<<root->right->data<<" "<<endl;
}

void preorder(Node* root)
{
    if(root==0) return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

void inorder(Node* root)
{
    if(root==0) return;
    preorder(root->left);
    cout<<root->data<<" ";
    preorder(root->right);
}

void postorder(Node* root)
{
    if(root==0) return;
    preorder(root->left);
    preorder(root->right);
    cout<<root->data<<" ";
}

int minDepth(Node *root) 
{ 
    if (root == NULL) 
        return 0; 
    if (root->left == NULL && root->right == NULL) 
    return 1; 
    if (!root->left) 
    return minDepth(root->right) + 1; 
    if (!root->right) 
    return minDepth(root->left) + 1; 
  
    return min(minDepth(root->left), minDepth(root->right)) + 1; 
} 



int findMaxUtil(Node* root, int &res) 
{ 
    
    if (root == NULL) 
        return 0; 
  
    int l = findMaxUtil(root->left,res); 
    int r = findMaxUtil(root->right,res); 
  
    cout<<"l= "<<l<<" "<<"r= "<<r<<endl;
    
    int max_single = max(max(l, r) + root->data, root->data); 
    
    cout<<"max_single: "<<max_single<<endl;
    
    int max_top = max(max_single, l + r + root->data); 
  
    cout<<"max_top: "<<max_top<<endl;
    
    res = max(res, max_top);  
    
    cout<<"res: "<<res<<endl;
  
    return max_single; 
} 
  
int findMaxSum(Node *root) 
{ 
    int res = INT_MIN; 
    findMaxUtil(root, res); 
    return res; 
} 


int main()
{
    // Node* root=0;
    // root=createNode();
    
    Node *root = newNode(10); 
    root->left        = newNode(2); 
    root->right       = newNode(10); 
    root->left->left  = newNode(20); 
    root->left->right = newNode(1); 
    root->right->right = newNode(-25); 
    root->right->right->left   = newNode(3); 
    root->right->right->right  = newNode(4); 
    // printTree(root);
    // // preorder(root);
    // // cout<<endl;
    // // inorder(root);
    // // cout<<endl;
    // // postorder(root);
    cout<<endl;
    //cout<<minDepth(root)<<endl;
    cout<<findMaxSum(root)<<endl;
}


